# alembic.ini

[alembic]
script_location = %(here)s/alembic

# Template usado para gerar arquivos de migração.
# file_template = %%(rev)s_%%(slug)s

# Caminho para sys.path, será adicionado ao início do sys.path se presente.
# O padrão é o diretório de trabalho atual.
prepend_sys_path = .

# Fuso horário a ser usado ao renderizar a data no arquivo de migração
# e também no nome do arquivo.
# Se especificado, requer python>=3.9 ou a biblioteca backports.zoneinfo e a biblioteca tzdata.
# Quaisquer dependências necessárias podem ser instaladas adicionando `alembic[tz]` aos requisitos do pip.
# O valor da string é passado para ZoneInfo().
# Deixe em branco para usar o horário local.
# timezone =

# Comprimento máximo de caracteres a aplicar ao campo "slug".
# truncate_slug_length = 40

# Defina como 'true' para executar o ambiente durante
# o comando 'revision', independentemente da autogeração.
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# Especificação do local das versões; O padrão é
# alembic/versions. Ao usar múltiplos diretórios de versão,
# as revisões iniciais devem ser especificadas com --version-path.
# O separador de caminho usado aqui deve ser o separador especificado por "path_separator" abaixo.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# Separador de caminho da versão; Como mencionado acima, este é o caractere usado para dividir
# version_locations. O padrão em novos arquivos alembic.ini é "os", que usa os.pathsep.
# Se esta chave for omitida completamente, ela volta ao comportamento legado de dividir por espaços e/ou vírgulas.
# Valores válidos para version_path_separator são:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
path_separator = os

# set to 'true' to search source files recursively
# em cada diretório "version_locations".
# new in Alembic version 1.10
# recursive_version_locations = false

# A codificação de saída usada quando os arquivos de revisão
# são escritos a partir de script.py.mako.
# output_encoding = utf-8

# IMPORTANTE: Esta URL será sobrescrita pelo env.py usando variáveis de ambiente
# Mantida aqui apenas como fallback/documentação
sqlalchemy.url = mysql+mysqlconnector://root:password@db:3306/printqa_db

[post_write_hooks]
# post_write_hooks define scripts ou funções Python que são executadas
# em scripts de revisão recém-gerados. Veja a documentação para mais
# detalhes e exemplos.

# Formatar usando "black" - use o executor console_scripts, contra o entrypoint "black".
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Fazer lint com tentativas de correção usando "ruff" - use o executor exec, execute um binário.
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Configuração de Logging
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S