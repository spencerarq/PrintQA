name: PrintQA CI/CD Pipeline

on:
  push:
    branches: [ main, develop, qa ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test-and-analyze:
    name: Testes e Análise de Qualidade
    runs-on: ubuntu-latest
    
    # --- Adiciona banco de dados (MySQL MariaDB) ---
    services:
      mysql:
        image: mysql:8.0 
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: test_printqa_db
        ports:
          - 3306:3306 
        options: >- 
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      TESTRAIL_HOST: ${{ secrets.TESTRAIL_URL }}
      TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USER }}
      TESTRAIL_PASSWORD: ${{ secrets.TESTRAIL_KEY }} 

      DB_USER: ${{ secrets.DB_USER }} 
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
      DB_HOST: mysql 
      DB_PORT: 3306 
      DB_NAME: test_printqa_db 
      DATABASE_URL: "mysql+mysqlconnector://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}"

    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar Dependências (incluindo DB e CLI)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Aguardar o banco de dados estar pronto
        run: |
          echo "Aguardando o serviço MySQL na porta ${{ env.DB_PORT }} no host ${{ env.DB_HOST }}..."
          
          # Tenta conectar via netcat para verificar a porta
          for i in $(seq 1 60); do # Tenta por até 60 segundos
            if nc -z -w 1 ${{ env.DB_HOST }} ${{ env.DB_PORT }}; then
              echo "MySQL disponível após $((i-1)) segundos de espera."
              break
            fi
            echo "MySQL ainda não disponível, tentando novamente em 1 segundo..."
            sleep 1
          done

          # Verifica se a porta realmente abriu após as tentativas
          if ! nc -z -w 1 ${{ env.DB_HOST }} ${{ env.DB_PORT }}; then
            echo "Erro: MySQL não ficou disponível na porta ${{ env.DB_PORT }} no tempo esperado."
            exit 1
          fi

          echo "Instalando cliente MySQL para verificação de conexão..."
          # Instala o cliente mysql para testar a conexão completa
          sudo apt-get update && sudo apt-get install -y mysql-client

          echo "Verificando conexão com o banco de dados via cliente MySQL..."
          # Loop para tentar conectar ao DB com o cliente mysql
          for i in $(seq 1 10); do # Tenta por até 50 segundos (10 tentativas * 5 segundos de espera)
            if mysql -h ${{ env.DB_HOST }} -P ${{ env.DB_PORT }} -u ${{ secrets.DB_USER }} -p"${{ secrets.DB_PASSWORD }}" -e "SELECT 1" ${{ env.DB_NAME }} > /dev/null 2>&1; then
              echo "Conexão com o banco de dados via cliente MySQL bem-sucedida!"
              break
            fi
            echo "Falha na conexão inicial do cliente MySQL, tentando novamente em 5 segundos..."
            sleep 5
          done

          # Verifica se a conexão do cliente mysql falhou após todas as tentativas
          if ! mysql -h ${{ env.DB_HOST }} -P ${{ env.DB_PORT }} -u ${{ secrets.DB_USER }} -p"${{ secrets.DB_PASSWORD }}" -e "SELECT 1" ${{ env.DB_NAME }} > /dev/null 2>&1; then
            echo "Erro: Não foi possível conectar ao banco de dados via cliente MySQL após múltiplas tentativas."
            exit 1
          fi

      # --- PASSO 1: Rodar Testes Pytest e Gerar Relatório JUnit XML ---
      - name: Rodar Testes e Gerar Relatório JUnit
        run: |
          # DATABASE_URL já está disponível no ambiente devido ao 'env:' do job
          pytest --cov=printqa --junitxml="junit-report.xml" "./tests" 

      # --- PASSO 2: Enviar Resultados para TestRail usando TestRail CLI (trcli) ---
      - name: Enviar Resultados para TestRail via CLI
        run: |
          trcli -y \
            -h "${{ env.TESTRAIL_HOST }}" \
            --project "PrintQA" \
            --username "${{ env.TESTRAIL_USERNAME }}" \
            --password "${{ env.TESTRAIL_PASSWORD }}" \
            parse_junit --title "Pytest Run - ${{ github.run_id }}" \
            -f junit-report.xml