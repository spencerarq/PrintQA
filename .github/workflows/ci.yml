name: PrintQA CI/CD Pipeline

on:
  push:
    branches: [ main, develop, qa ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test-and-analyze:
    name: Testes e Análise de Qualidade
    runs-on: ubuntu-latest
    
    # --- Adiciona banco de dados (MySQL MariaDB) ---
    services:
      mysql:
        image: mysql:8.0 
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: test_printqa_db
          MYSQL_USER: ${{ secrets.DB_USER }}  
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306 
        options: >- 
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      TESTRAIL_HOST: ${{ secrets.TESTRAIL_URL }}
      TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USER }}
      TESTRAIL_PASSWORD: ${{ secrets.TESTRAIL_KEY }} 

      DB_USER: ${{ secrets.DB_USER }} 
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
      DB_HOST: 127.0.0.1 
      DB_PORT: 3306 
      DB_NAME: test_printqa_db 
      DATABASE_URL: "mysql+mysqlconnector://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@mysql:3306/test_printqa_db"

    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar Dependências (incluindo DB e CLI)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Aguardar o banco de dados estar pronto
        run: |
          echo "Aguardando o serviço MySQL..."
          
          # Aguarda o health check do MySQL service
          for i in $(seq 1 30); do
            if nc -z mysql 3306; then
              echo "MySQL está respondendo na porta 3306!"
              break
            fi
            echo "Aguardando MySQL... (tentativa $i/30)"
            sleep 2
          done

          # Instala cliente MySQL
          sudo apt-get update && sudo apt-get install -y mysql-client

          # Testa conexão com credenciais de forma segura
          echo "Testando conexão com o banco de dados..."
          
          # Cria arquivo temporário com as credenciais
          cat > /tmp/.my.cnf << EOF
          [client]
          host=mysql
          port=3306
          user=${{ secrets.DB_USER }}
          password=${{ secrets.DB_PASSWORD }}
          EOF
          
          # Define permissões seguras para o arquivo de configuração
          chmod 600 /tmp/.my.cnf
          
          for i in $(seq 1 10); do
            if mysql --defaults-file=/tmp/.my.cnf -e "SELECT 1;" test_printqa_db &>/dev/null; then
              echo "Conexão com MySQL bem-sucedida!"
              echo "Testando acesso ao banco test_printqa_db..."
              mysql --defaults-file=/tmp/.my.cnf -e "USE test_printqa_db; SHOW TABLES;" &>/dev/null && echo "Acesso ao banco confirmado!" || echo "Banco existe mas sem tabelas (normal)"
              break
            fi
            echo "Tentativa $i/10 falhou, aguardando..."
            sleep 3
          done
          
          # Remove arquivo de credenciais
          rm -f /tmp/.my.cnf

      # --- PASSO 1: Rodar Testes Pytest e Gerar Relatório JUnit XML ---
      - name: Rodar Testes e Gerar Relatório JUnit
        run: |
          # Debug seguro - mostra apenas a estrutura da URL sem credenciais
          echo "Conectando ao banco: mysql://***:***@mysql:3306/test_printqa_db"
          echo "Rodando testes pytest..."
          pytest --cov=printqa --junitxml="junit-report.xml" "./tests" 

      # --- PASSO 2: Enviar Resultados para TestRail usando TestRail CLI (trcli) ---
      - name: Enviar Resultados para TestRail via CLI
        run: |
          trcli -y \
            -h "${{ env.TESTRAIL_HOST }}" \
            --project "PrintQA" \
            --username "${{ env.TESTRAIL_USERNAME }}" \
            --password "${{ env.TESTRAIL_PASSWORD }}" \
            parse_junit --title "Pytest Run - ${{ github.run_id }}" \
            -f junit-report.xml