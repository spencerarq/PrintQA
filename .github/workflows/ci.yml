name: PrintQA CI/CD Pipeline

on:
  push:
    branches: [ main, develop, qa ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test-and-analyze:
    name: Testes e Análise de Qualidade
    runs-on: ubuntu-latest
    
    # --- Serviço MySQL com configurações otimizadas ---
    services:
      mysql:
        image: mysql:8.0 
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: test_printqa_db
          MYSQL_USER: ${{ secrets.DB_USER }}  
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306 
        options: >- 
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15
          --health-start-period=30s

    env:
      TESTRAIL_HOST: ${{ secrets.TESTRAIL_URL }}
      TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USER }}
      TESTRAIL_PASSWORD: ${{ secrets.TESTRAIL_KEY }} 

      DB_USER: ${{ secrets.DB_USER }} 
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
      DB_HOST: 127.0.0.1 
      DB_PORT: 3306 
      DB_NAME: test_printqa_db 
      DATABASE_URL: "mysql+mysqlconnector://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3306/test_printqa_db"

    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar Dependências (incluindo DB e CLI)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Aguardar e Validar Banco de Dados
        run: |
          echo "Aguardando o serviço MySQL ficar disponível..."
          
          # Instala ferramentas necessárias
          sudo apt-get update -qq
          sudo apt-get install -y netcat-openbsd mysql-client-core-8.0
          
          # Aguarda o serviço MySQL estar disponível na porta
          echo "Verificando conectividade de rede..."
          for i in $(seq 1 60); do
            if nc -z 127.0.0.1 3306; then
              echo "MySQL está respondendo na porta 3306!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Timeout: MySQL não respondeu após 2 minutos"
              exit 1
            fi
            echo "⏳ Aguardando MySQL... (tentativa $i/60)"
            sleep 2
          done
          
          # Aguarda o health check interno do container
          echo "Aguardando health check do MySQL..."
          sleep 10
          
          # Testa conexão com o banco usando variáveis de ambiente
          echo "Testando autenticação no banco de dados..."
          
          # Função para testar conexão de forma segura
          test_mysql_connection() {
            mysql \
              -h 127.0.0.1 \
              -P 3306 \
              -u "${DB_USER}" \
              -p"${DB_PASSWORD}" \
              -e "SELECT 1 as test_connection;" \
              "${DB_NAME}" \
              2>/dev/null
          }
          
          # Tenta conectar com retry
          for i in $(seq 1 15); do
            if test_mysql_connection >/dev/null 2>&1; then
              echo "Conexão com MySQL autenticada com sucesso!"
              
              # Verifica se o banco existe e está acessível
              echo "Verificando acesso ao banco '${DB_NAME}'..."
              if mysql -h 127.0.0.1 -P 3306 -u "${DB_USER}" -p"${DB_PASSWORD}" \
                       -e "USE ${DB_NAME}; SELECT DATABASE() as current_db;" 2>/dev/null; then
                echo "Acesso ao banco '${DB_NAME}' confirmado!"
              else
                echo "Banco existe mas pode estar vazio (normal para testes)"
              fi
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "Falha na autenticação após 15 tentativas"
              echo "Informações de debug (sem credenciais):"
              echo "   - Host: 127.0.0.1:3306"
              echo "   - Database: ${DB_NAME}"
              echo "   - User: ${DB_USER}"
              exit 1
            fi
            
            echo "Tentativa de autenticação $i/15 falhou, aguardando..."
            sleep 3
          done
          
          echo "Banco de dados está pronto para os testes!"

      # --- PASSO 1: Rodar Testes Pytest e Gerar Relatório JUnit XML ---
      - name: Rodar Testes e Gerar Relatório JUnit
        run: |
          echo "Iniciando execução dos testes..."
          echo "Conectando ao banco: mysql://***:***@127.0.0.1:3306/${DB_NAME}"
          
          # Executa os testes com timeout para evitar travamentos
          timeout 300 pytest \
            --cov=printqa \
            --cov-report=html \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml="junit-report.xml" \
            --tb=short \
            -v \
            "./tests" || {
              echo "Testes falharam ou foram interrompidos por timeout"
              exit 1
            }
          
          echo "Testes executados com sucesso!"

      # --- PASSO 2: Upload dos Artefatos de Teste ---
      - name: Upload Relatórios de Teste
        uses: actions/upload-artifact@v4
        if: always()  # Sempre faz upload, mesmo se os testes falharem
        with:
          name: test-reports
          path: |
            junit-report.xml
            htmlcov/
            coverage.xml
          retention-days: 30

      # --- PASSO 3: Enviar Resultados para TestRail usando TestRail CLI (trcli) ---
      - name: Enviar Resultados para TestRail via CLI
        if: success()  # Só executa se os testes passaram
        run: |
          echo "Enviando resultados para TestRail..."
          
          # Verifica se o arquivo de relatório existe
          if [ ! -f "junit-report.xml" ]; then
            echo "Arquivo junit-report.xml não encontrado"
            exit 1
          fi
          
          # Envia para TestRail com timeout
          timeout 120 trcli -y \
            -h "${TESTRAIL_HOST}" \
            --project "PrintQA" \
            --username "${TESTRAIL_USERNAME}" \
            --password "${TESTRAIL_PASSWORD}" \
            parse_junit \
            --title "Pytest Run - Build #${{ github.run_number }} (${{ github.sha }})" \
            --run-description "Execução automática via GitHub Actions - Branch: ${{ github.ref_name }}" \
            -f junit-report.xml || {
              echo "Falha ao enviar resultados para TestRail"
              exit 1
            }
          
          echo "Resultados enviados para TestRail com sucesso!"

      # --- PASSO 4: Comentário no PR com Resultados (opcional) ---
      - name: Comentar Resultados no PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('junit-report.xml')) {
              const comment = `## Resultados dos Testes
              
              Pipeline executado com sucesso!
              - Build: #${{ github.run_number }}
              - Commit: ${{ github.sha }}
              - Branch: ${{ github.ref_name }}
              
              Relatórios disponíveis nos artefatos da execução.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }